package audience

import (
	"github.com/jfkgustav/direq/model"
	"github.com/jfkgustav/direq/view"
	"slices"
	"strconv"
)

templ Index(songs []model.Song, tags []string, decade int, showFilter bool) {
	{{songs = getSongsFromDecade(songs, decade)
decadeFilter := 0
if decade != 0 {
	decadeFilter = 1
}
var shownSongs []string
isHidden := "hidden"
if showFilter {
	isHidden = ""
}
	}}
	@view.Layout() {
		<div class="container px-2 flex flex-col space-y-2 lg:w-1/2 text-neutral-100">
			<a href="/" class="text-center pt-4 text-neutral-100 font-bold text-2xl text-center">
				Önska låtar
			</a>
			<div class="rounded-md container px-4 py-1 bg-neutral-100 text-neutral-900 ">
				Sök...  
			</div>
			<div class="flex container px-4 !mt-2 justify-between">
				<button id="filterButton" class="underline">Filtrera ({ strconv.Itoa(len(tags) + decadeFilter) })</button>
				<div class="p-2 bg-neutral-200 rounded-md text-black">Sortera</div>
			</div>
			<div id="filter" class={ isHidden + " bg-neutral-800 container p-4" }>
				@filter(getTags(songs), tags)
			</div>
			<p class="px-4 !mt-2">{ strconv.Itoa(len(songs)) } låtar</p>
			for _, song := range songs {
				for _, tag := range song.Tags {
					if !slices.Contains(shownSongs, song.Song) && (len(tags) == 0 || slices.Contains(tags, tag)) {
						{{	shownSongs = append(shownSongs, song.Song)
	href_address := "/request-song?song_id=" + strconv.Itoa(song.ID)
						}}
						<div class="flex flex-col p-2 rounded-md container bg-neutral-800 text-sm">
							<a href={ templ.URL(href_address) }>
								@SongCard(song)
							</a>
						</div>
					}
				}
			}
		</div>
	}
	<script> 
		const filterButton = document.getElementById('filterButton');
 	 	const filterDiv = document.getElementById('filter');
		filterButton.addEventListener('click', () => {
			filterDiv.classList.toggle('hidden');
		});
  </script>
}

func getTags(songs []model.Song) []string {
	var tags []string
	for _, song := range songs {
		for _, tag := range song.Tags {
			if !slices.Contains(tags, tag) {
				tags = append(tags, tag)
			}
		}
	}
	return tags
}

func getSongsFromDecade(songs []model.Song, decade int) []model.Song {
	if decade == 0 {
		return songs
	}
	var result []model.Song
	yearMax := decade + 10
	for _, song := range songs {
		if song.Year >= decade && song.Year < yearMax {
			result = append(result, song)
		}
	}
	return result
}

templ filter(tags []string, checkedTags []string) {
	<form action="/" class="flex flex-col space-y-3">
		@decade()
		<div class="flex flex-wrap container justify-between space-y-2">
			for _, tag := range tags {
				<div class="w-1/3 lg:w-1/6 self-center">
					<input checked?={ slices.Contains(checkedTags, tag) } type="checkbox" id={ tag } name="tags" value={ tag }/>
					<label for={ tag }>{ tag } </label>
				</div>
			}
		</div>
		<div class="flex justify-between">
			<input type="submit" value="Filtrera" class="p-2 bg-neutral-200 text-neutral-900 rounded-sm"/>
			<a href="/?clear=clear" class="p-2 text-red-400 rounded-sm">Rensa filter </a>
		</div>
	</form>
}

templ decade() {
	<div class="flex space-x-4 align-center">
		<select name="decade" id="decade" class="text-neutral-900 p-2 rounded-sm">
			<option value="decade">Årtionde</option>
			<option value="1950">50-tal</option>
			<option value="1960">60-tal</option>
			<option value="1970">70-tal</option>
			<option value="1980">80-tal</option>
			<option value="1990">90-tal</option>
			<option value="2000">00-tal</option>
			<option value="2010">10-tal</option>
			<option value="2020">20-tal</option>
		</select>
	</div>
}
